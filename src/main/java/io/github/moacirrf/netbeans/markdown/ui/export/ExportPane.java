/*
 * Copyright (C) 2023 Moacir da Roza Flores <moacirrf@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package io.github.moacirrf.netbeans.markdown.ui.export;

import io.github.moacirrf.netbeans.markdown.export.Exporter;
import io.github.moacirrf.netbeans.markdown.export.ExporterConfig;
import io.github.moacirrf.netbeans.markdown.export.InputModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DropMode;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import static javax.swing.SwingUtilities.invokeLater;
import javax.swing.SwingWorker;
import org.apache.commons.lang3.StringUtils;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.filesystems.FileUtil;

/**
 *
 * @author Moacir da Roza Flores <moacirrf@gmail.com>
 */
public class ExportPane extends javax.swing.JPanel implements ActionListener {

    private static final String MESSAGE_SELECT_DESTINY = "* Select destiny folder";
    private static final String MESSAGE_NOT_VALID_DESTINY = "* Is not a valid folder";
    private static final String MESSAGE_REQUIRED_UNIQUE_NAME = "* You must include a name";

    public static ExportPane newPane(List<File> files, ActionListener onExportedFile) {
        var pane = new ExportPane();
        pane.uniqueFilePane.setVisible(files.size() > 1);
        pane.exporterConfig = new ExporterConfig();
        pane.exporterConfig.setMdfiles(new ArrayList<>());
        pane.onExportedFile = onExportedFile;
        pane.tableFiles.setModel(new MyDefaultTableModel(files));
        pane.tableFiles.setDefaultRenderer(JPanel.class, new OrderTableCellRenderer());
        pane.tableFiles.setDefaultEditor(JPanel.class, new MyOrderTableCellEditor());
//        var model = (DefaultTableModel) pane.tableFiles.getModel();
//        model.setRowCount(files.size());

        return pane;
    }

    private ExporterConfig exporterConfig;

    private ActionListener onExportedFile;

    /**
     * Creates new form ExportIndividualPane
     */
    private ExportPane() {
        initComponents();
        this.destinyFolderErrorMessage.setVisible(false);
        this.progressPane.setVisible(false);
        this.pdfExport.addActionListener(this);
        this.docxExport.addActionListener(this);
        this.newUniqueName.setEnabled(this.joinFiles.isSelected());
        this.uniqueNameErrorLabel.setVisible(false);
        this.tableFiles.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.tableFiles.setDropMode(DropMode.INSERT_ROWS);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        destinyPane = new javax.swing.JPanel();
        pathDestiny = new javax.swing.JTextField();
        destinyFolderErrorMessage = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        uniqueFilePane = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableFiles = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        uniqueNameErrorLabel = new javax.swing.JLabel();
        newUniqueName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        joinFiles = new javax.swing.JCheckBox();
        progressPane = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        buttonsPane = new javax.swing.JPanel();
        pdfExport = new javax.swing.JButton();
        docxExport = new javax.swing.JButton();

        setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N

        destinyPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pathDestiny.setText(org.openide.util.NbBundle.getMessage(ExportPane.class, "ExportPane.pathDestiny.text")); // NOI18N
        pathDestiny.setAlignmentY(0.0F);
        destinyPane.add(pathDestiny, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, -1));

        destinyFolderErrorMessage.setFont(new java.awt.Font("sansserif", 1, 10)); // NOI18N
        destinyFolderErrorMessage.setForeground(new java.awt.Color(255, 51, 51));
        destinyFolderErrorMessage.setLabelFor(destinyFolderErrorMessage);
        org.openide.awt.Mnemonics.setLocalizedText(destinyFolderErrorMessage, org.openide.util.NbBundle.getMessage(ExportPane.class, "ExportPane.destinyFolderErrorMessage.text")); // NOI18N
        destinyFolderErrorMessage.setAlignmentY(0.0F);
        destinyPane.add(destinyFolderErrorMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 26, 379, 10));

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(ExportPane.class, "ExportPane.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        destinyPane.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 0, -1, -1));

        tableFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableFiles);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        uniqueNameErrorLabel.setFont(new java.awt.Font("sansserif", 1, 10)); // NOI18N
        uniqueNameErrorLabel.setForeground(new java.awt.Color(255, 51, 51));
        org.openide.awt.Mnemonics.setLocalizedText(uniqueNameErrorLabel, org.openide.util.NbBundle.getMessage(ExportPane.class, "ExportPane.uniqueNameErrorLabel.text")); // NOI18N
        uniqueNameErrorLabel.setToolTipText(org.openide.util.NbBundle.getMessage(ExportPane.class, "ExportPane.uniqueNameErrorLabel.toolTipText")); // NOI18N
        jPanel1.add(uniqueNameErrorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 37, 380, 10));

        newUniqueName.setText(org.openide.util.NbBundle.getMessage(ExportPane.class, "ExportPane.newUniqueName.text")); // NOI18N
        jPanel1.add(newUniqueName, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 410, -1));

        jLabel1.setLabelFor(newUniqueName);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ExportPane.class, "ExportPane.jLabel1.text")); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, -1, 30));

        org.openide.awt.Mnemonics.setLocalizedText(joinFiles, org.openide.util.NbBundle.getMessage(ExportPane.class, "ExportPane.joinFiles.text")); // NOI18N
        joinFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinFilesActionPerformed(evt);
            }
        });
        jPanel1.add(joinFiles, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 82, 30));

        javax.swing.GroupLayout uniqueFilePaneLayout = new javax.swing.GroupLayout(uniqueFilePane);
        uniqueFilePane.setLayout(uniqueFilePaneLayout);
        uniqueFilePaneLayout.setHorizontalGroup(
            uniqueFilePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, uniqueFilePaneLayout.createSequentialGroup()
                .addGroup(uniqueFilePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        uniqueFilePaneLayout.setVerticalGroup(
            uniqueFilePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(uniqueFilePaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addContainerGap())
        );

        progressBar.setIndeterminate(true);
        progressBar.setMinimumSize(new java.awt.Dimension(10, 10));

        javax.swing.GroupLayout progressPaneLayout = new javax.swing.GroupLayout(progressPane);
        progressPane.setLayout(progressPaneLayout);
        progressPaneLayout.setHorizontalGroup(
            progressPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        progressPaneLayout.setVerticalGroup(
            progressPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(pdfExport, org.openide.util.NbBundle.getMessage(ExportPane.class, "ExportPane.pdfExport.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(docxExport, org.openide.util.NbBundle.getMessage(ExportPane.class, "ExportPane.docxExport.text")); // NOI18N

        javax.swing.GroupLayout buttonsPaneLayout = new javax.swing.GroupLayout(buttonsPane);
        buttonsPane.setLayout(buttonsPaneLayout);
        buttonsPaneLayout.setHorizontalGroup(
            buttonsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsPaneLayout.createSequentialGroup()
                .addContainerGap(400, Short.MAX_VALUE)
                .addComponent(docxExport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pdfExport)
                .addContainerGap())
        );
        buttonsPaneLayout.setVerticalGroup(
            buttonsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pdfExport)
                    .addComponent(docxExport))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttonsPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(destinyPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(uniqueFilePane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(destinyPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uniqueFilePane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonsPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        selectDestiny();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void joinFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinFilesActionPerformed
        this.onCheckJoinFiles();
    }//GEN-LAST:event_joinFilesActionPerformed

    private void selectDestiny() {
        var fileSystem = FileUtil.createMemoryFileSystem();
        File file = FileChooserBuilder.create(fileSystem)
                .setDirectoriesOnly(true)
                .setFileHiding(false)
                .showOpenDialog();
        this.pathDestiny.setText(file.getAbsolutePath());
        isDestinyFolderValid();
    }

    private boolean isDestinyFolderValid() {
        exporterConfig.setDestinyFolder(new File(this.pathDestiny.getText()));
        if (exporterConfig.getDestinyFolder() != null && exporterConfig.getDestinyFolder().exists()) {
            if (exporterConfig.getDestinyFolder().isDirectory()) {
                this.destinyFolderErrorMessage.setVisible(false);
                return true;
            } else {
                this.destinyFolderErrorMessage.setText(MESSAGE_NOT_VALID_DESTINY);
                this.destinyFolderErrorMessage.setVisible(true);
            }
        } else {
            this.destinyFolderErrorMessage.setText(MESSAGE_SELECT_DESTINY);
            this.destinyFolderErrorMessage.setVisible(true);
        }

        this.destinyFolderErrorMessage.setVisible(true);
        return false;
    }

    private boolean isValidUniqueName() {

        if ((!this.newUniqueName.isEnabled()) || StringUtils.isNoneBlank(this.newUniqueName.getText().trim())) {
            this.uniqueNameErrorLabel.setVisible(false);
            return true;
        } else {
            this.uniqueNameErrorLabel.setText(MESSAGE_REQUIRED_UNIQUE_NAME);
            this.uniqueNameErrorLabel.setVisible(true);
        }
        return false;
    }

    public JPanel getProgressPane() {
        return progressPane;
    }

    private void onCheckJoinFiles() {
        this.newUniqueName.setEnabled(this.joinFiles.isSelected());
        this.newUniqueName.setText("newOutFile");
        isValidUniqueName();

    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (isDestinyFolderValid() && isValidUniqueName()) {
           MyDefaultTableModel model = (MyDefaultTableModel) tableFiles.getModel();
            exporterConfig.setMdfiles(model.toInputModel());
            this.exporterConfig.setUniqueFile(this.joinFiles.isSelected());
            this.exporterConfig.setOutputFileName(this.newUniqueName.getText());
            var worker = new SwingWorker<>() {
                @Override
                protected Object doInBackground() throws Exception {
                    getProgressPane().setVisible(true);
                    docxExport.setEnabled(false);
                    pdfExport.setEnabled(false);
                    Exporter.newExporter(e.getActionCommand())
                            .ifPresent(exp -> exp.export(exporterConfig));
                    return null;
                }

                @Override
                protected void done() {
                    invokeLater(() -> {
                        getProgressPane().setVisible(false);
                        docxExport.setEnabled(true);
                        pdfExport.setEnabled(true);
                        onExportedFile.actionPerformed(e);
                    });
                }
            };
            worker.execute();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsPane;
    private javax.swing.JLabel destinyFolderErrorMessage;
    private javax.swing.JPanel destinyPane;
    private javax.swing.JButton docxExport;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox joinFiles;
    private javax.swing.JTextField newUniqueName;
    private javax.swing.JTextField pathDestiny;
    private javax.swing.JButton pdfExport;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JPanel progressPane;
    private javax.swing.JTable tableFiles;
    private javax.swing.JPanel uniqueFilePane;
    private javax.swing.JLabel uniqueNameErrorLabel;
    // End of variables declaration//GEN-END:variables

}
